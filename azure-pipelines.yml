trigger:
- main
- dev

pool:
  name: 'self-hosted-mac'

variables:
  solution: '*.sln'
  buildConfiguration: 'Release'
  versionNumber: '1.0.$(Build.BuildId)'
  dockerRegistryServiceConnection: '07a2f922-bccd-4d78-9c30-6c961948506c'
  imageRepository: 'salesapi'
  containerRegistry: 'devopsdockerregistry.azurecr.io'
  dockerfilePath: './Dockerfile'
  tag: '1.0.$(Build.BuildId)'

- ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    variables:
      buildConfiguration: 'Debug' 
      versionNumber: '1.0.$(Build.BuildId).dev' 
      dockerRegistryServiceConnection: '07a2f922-bccd-4d78-9c30-6c961948506c'
      imageRepository: 'dev/salesapi'
      containerRegistry: 'devopsdockerregistry.azurecr.io'
      dockerfilePath: './Dockerfile'
      tag: '1.0.$(Build.BuildId).dev'

steps:
- script: |
    dotnet restore $(solution)
  displayName: 'Restore NuGet packages'

- script: |
    dotnet build $(solution) --configuration $(buildConfiguration)
  displayName: 'Build solution'

# - script: |
#     dotnet test $(solution) --configuration $(buildConfiguration) --no-build --verbosity normal
#   displayName: 'Run unit tests'

- script: |
    dotnet publish $(solution) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(versionNumber)
  displayName: 'Publish solution'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(versionNumber)'
    ArtifactName: 'drop-$(versionNumber)'
    publishLocation: 'Container'
  displayName: 'Publish build artifacts'

- script: |
    dotnet pack $(solution) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
  displayName: 'Pack solution into NuGet package'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'nuget'
    arguments: 'push $(Build.ArtifactStagingDirectory)/*.nupkg --source "release" --api-key az --skip-duplicate'
  displayName: 'Publish NuGet package to Azure Artifacts'

# - script: |
#     docker build -t devopsdockerregistry.azurecr.io/production/salesapi:$(versionNumber) .
#     docker push devopsdockerregistry.azurecr.io/production/salesapi:$(versionNumber)
#   displayName: 'Build and push Docker image'

- task: Docker@2
  displayName: Build and push an image to container registry
  inputs:
    command: buildAndPush
    repository: $(imageRepository)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)
